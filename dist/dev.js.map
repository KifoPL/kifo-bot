{"version":3,"file":"dev.js","sourceRoot":"","sources":["../src/dev.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AAKpB,OAAO,EACH,MAAM,EACN,UAAU,EACV,MAAM,EACN,iBAAiB,EACjB,IAAI,EACJ,MAAM,GACT,MAAM,YAAY,CAAC;AACpB,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAE9C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,CAAC;AAEpE,MAAM,MAAM,GAAe,IAAI,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAE/E,MAAM,CAAC,QAAQ,GAAG,IAAI,UAAU,EAAuB,CAAC;AAExD,MAAM,cAAc,CAAC,MAAM,CAAC,CAAC;AAE7B,KAAK,UAAU,gBAAgB;IAC3B,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IAEzE,IAAI;QACA,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;QAEpE,MAAM,IAAI,CAAC,GAAG,CACV,MAAM,CAAC,wBAAwB,CAC3B,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,WAAW,CACrB,EACD,EAAE,IAAI,EAAE,QAAQ,EAAE,CACrB,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;KAC1E;IAAC,OAAO,KAAK,EAAE;QACZ,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACxB;AACL,CAAC;AAED,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;IACjC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;IACvC,MAAM,gBAAgB,EAAE,CAAC;IACzB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC","sourcesContent":["import fs from 'fs';\nimport type {\n    KifoClient,\n    KifoCommand,\n} from './interfaces/discordExtensions.js';\nimport {\n    Client,\n    Collection,\n    Events,\n    GatewayIntentBits,\n    REST,\n    Routes,\n} from 'discord.js';\nimport { setAllCommands } from './helpers.js';\n\nconst config = JSON.parse(fs.readFileSync('./config.json', 'utf8'));\n\nconst client = <KifoClient>new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.commands = new Collection<string, KifoCommand>();\n\nawait setAllCommands(client);\n\nasync function registerCommands() {\n    const rest = new REST({ version: '10' }).setToken(config.token);\n\n    const commands = client.commands.map((command) => command.data.toJSON());\n\n    try {\n        console.log('=== Started refreshing application (/) commands. ===');\n\n        await rest.put(\n            Routes.applicationGuildCommands(\n                config.clientId,\n                config.devServerId\n            ),\n            { body: commands }\n        );\n\n        console.log('=== Successfully reloaded application (/) commands. ===');\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nclient.login(config.token).then(() => {\n    console.log('Logged in!');\n});\n\nclient.once(Events.ClientReady, async () => {\n    await registerCommands();\n    process.exit(0);\n});\n"]}